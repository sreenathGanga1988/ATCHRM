using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using System.Data;
namespace ATCHRM.Transactions
{
    class RecruitApplicationTransaction
    {
        AnycodeAutoGenerator anycodegenarator = null;
        public String  insertRecruitApplication(Datalayer.RecruitAppDatabean rcrtappdatabean)
        {
            anycodegenarator= new AnycodeAutoGenerator ();
            try
            {

                using (SqlConnection sqlConnection1 = new SqlConnection(Program.ConnStr))
                {

                    int recruitmentid;
                    sqlConnection1.Open();


                    using (SqlCommand command = new SqlCommand("INSERT INTO RecruitmentApplicationMaster_tbl (BranchLocationPK, DesignationPk, Vaccancynum, Contracttype, Isinterviewed, Interviewer, JoiningDate, Descriptions, iscompleted, Dateadded, Userpk ,balncenum ) " +
 " VALUES (@Param1,@Param2,@Param3,@Param4,@Param5,@Param6,@Param7,@Param8,@Param9,@Param10,@Param11,@Param12  );SELECT SCOPE_IDENTITY() ", sqlConnection1))
                    {

                        command.Parameters.AddWithValue("@Param1", rcrtappdatabean.BranchLocationpk);
                        command.Parameters.AddWithValue("@Param2", rcrtappdatabean.Designationpk );
                        command.Parameters.AddWithValue("@Param3", rcrtappdatabean.Vaccancynum);
                        command.Parameters.AddWithValue("@Param4", rcrtappdatabean.Contracttype);
                        command.Parameters.AddWithValue("@Param5", rcrtappdatabean.Isinterviewed);
                        command.Parameters.AddWithValue("@Param6", rcrtappdatabean.Interviewer);
                        command.Parameters.AddWithValue("@Param7", rcrtappdatabean.Joiningdate);
                        command.Parameters.AddWithValue("@Param8", rcrtappdatabean.Description1);
                        command.Parameters.AddWithValue("@Param9", rcrtappdatabean.Iscompleted );
                        command.Parameters.AddWithValue("@Param10", DateTime.Now.Date);
                        command.Parameters.AddWithValue("@Param11" , Program.USERPK);
                        command.Parameters.AddWithValue("@Param12", rcrtappdatabean.Vaccancynum);
                      

                        recruitmentid = int.Parse(command.ExecuteScalar().ToString());

                    }

                    sqlConnection1.Close();
                    String applicationcode = anycodegenarator.RecruitmentApplicationcodegenerator(recruitmentid, rcrtappdatabean.Contracttype);
                    String updatedappnum = AppendApplicationNum(applicationcode, recruitmentid);
                    return updatedappnum;
                }

            }
            catch (Exception exp)
            {

                throw exp;
            }


        }

        /// <summary>
        /// add the RecriutmentAoolication code autogenerated to the recruitment applicationmaster
        /// </summary>
        /// <param name="appnum"></param>
        /// <param name="recruitid"></param>
        /// <returns></returns>
        public String  AppendApplicationNum(String  appnum,int recruitid )
        {
            String sucessappnum = null;
            using (SqlConnection sqlConnection1 = new SqlConnection(Program.ConnStr))
            {

                sqlConnection1.Open();
                using (SqlCommand command = new SqlCommand("UPDATE    RecruitmentApplicationMaster_tbl SET  Applicationnum = @Param1 WHERE (RecruitmentAppPk = @Param2)", sqlConnection1))
                {
                    command.Parameters.AddWithValue("@Param1", appnum);
                    command.Parameters.AddWithValue("@Param2", recruitid);

                    command.ExecuteNonQuery(); 
                    sucessappnum =appnum;
                }

               
                sqlConnection1.Close();
            }

            return appnum;
        }

        /// <summary>
        /// get all the recruitment application for level 1 Approval
        /// </summary>
        /// <returns></returns>
        public DataTable getalldataforApproval1()
        {
            DataTable dt = new DataTable(); ;
            using ( SqlConnection con = new SqlConnection(Program.ConnStr) )
            {
                con.Open();

                SqlCommand cmd = new SqlCommand("RecrtmentappLevel1 ", con);

                cmd.Parameters.AddWithValue("@BRANCHlCTNPK", Program.LOCTNPK);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataReader reader = cmd.ExecuteReader();

                dt.Load(reader);
                con.Close();
            }
            return dt;
        }
       
        
        
        
        
        
        /// <summary>
        /// remove fromlist
        /// </summary>
        /// <param name="appid"></param>
        public void removefromlist(int appid)
        {
            using (SqlConnection sqlConnection1 = new SqlConnection(Program.ConnStr))
            {
                sqlConnection1.Open();
                using (SqlCommand command = new SqlCommand("UPDATE    RecruitmentApplicationMaster_tbl SET              Display_Hide = N'Y' WHERE     (RecruitmentAppPk = @Param1)", sqlConnection1))
                {

                    command.Parameters.AddWithValue("@Param1", appid);


                    command.ExecuteNonQuery();

                }

                sqlConnection1.Close();
            }

        }
    
  /// <summary>
        /// get all the recruitment application for level 2 Approval
        /// </summary>
        /// <returns></returns>
        public DataTable getalldataforApprovallevel2()
        {
            DataTable dt = new DataTable(); ;
            using ( SqlConnection con = new SqlConnection(Program.ConnStr) )
            {
                con.Open();

                SqlCommand cmd = new SqlCommand("RecruitApprovalforlevel2 ", con);
                cmd.Parameters.AddWithValue("@BRANCHlCTNPK", Program.LOCTNPK);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataReader reader = cmd.ExecuteReader();

                dt.Load(reader);
                con.Close();
            }
            return dt;
        }



        /// <summary>
        /// get all the recruitment application for level 2 Approval
        /// </summary>
        /// <returns></returns>
        public DataTable getalldataforApprovallevel3()
        {
            DataTable dt = new DataTable(); ;
            using (SqlConnection con = new SqlConnection(Program.ConnStr))
            {
                con.Open();

                SqlCommand cmd = new SqlCommand("RecruitmentApprovalLevel3", con);

             //   cmd.Parameters.AddWithValue("@BRANCHlCTNPK",Program.LOCTNPK );

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataReader reader = cmd.ExecuteReader();

                dt.Load(reader);
                con.Close();
            }
            return dt;
        }





        public DataTable getallApprovedRecruitmentAppData()
        {

            DataTable dt = new DataTable(); ;
            using (SqlConnection con = new SqlConnection(Program.ConnStr))
            {
                con.Open();

                SqlCommand cmd = new SqlCommand("ApprovedRecruitment_sp", con);
                cmd.Parameters.AddWithValue("@BRANCHlCTNPK", Program.LOCTNPK);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataReader reader = cmd.ExecuteReader();

                dt.Load(reader);
                con.Close();
            }
            return dt;
        }

        /// <summary>
        /// gets all the remaining Recruitment Codes that is not assigned
        /// or used in employye creation
        /// 
        /// </summary>
        /// <returns></returns>
         public DataTable getAllRecruitmentCode()
        {
            SqlConnection con = new SqlConnection(Program.ConnStr);
            try
            {

                con.Open();
             

                

                    SqlCommand cmd = new SqlCommand(" SELECT     RecruitmentCodeMaster_tbl.EmpInternalCode, RecruitmentCodeMaster_tbl.RecruitmentCodePK " +
                     "   FROM         RecruitmentCodeMaster_tbl INNER JOIN " +
                      "   RecruitmentApplicationMaster_tbl ON RecruitmentCodeMaster_tbl.RecruitmentPK = RecruitmentApplicationMaster_tbl.RecruitmentAppPk " +
    " WHERE     (RecruitmentCodeMaster_tbl.Status <> 'A') AND (RecruitmentCodeMaster_tbl.Status <> 'U') AND (RecruitmentApplicationMaster_tbl.BranchLocationPK = @Param1) ", con);


        
               




                cmd.Parameters.AddWithValue("@Param1" ,Program.LOCTNPK);

                SqlDataReader reader = cmd.ExecuteReader();
                DataTable dt = new DataTable();

                dt.Load(reader);
                return dt;

            }
            catch (Exception)
            {

                throw;


            }
            finally
            {
                con.Close();
            }
        }

        /// <summary>
        /// gets the  recruitment code generated against each 
        /// applicaton number
        /// </summary>
        /// <returns></returns>
         public DataTable getallRecruitmentCodeandApplication()
         {

             String Query = "SELECT     RecruitmentCodeMaster_tbl.RecruitmentCodePK, RecruitmentCodeMaster_tbl.EmpInternalCode, DesignationMaster_tbl.DesignationName, " +
                     " DepartmentMaster_tbl.DepartmentName, BranchLocartionMaster_tbl.BranchLocationName, RecruitmentApplicationMaster_tbl.Dateadded, " +
                     " RecruitmentCodeMaster_tbl.Status, RecruitmentApplicationMaster_tbl.Contracttype, RecruitmentApplicationMaster_tbl.Interviewer, " +
                      "RecruitmentApplicationMaster_tbl.Applicationnum " +
                     " FROM  DepartmentMaster_tbl INNER JOIN " +
                    "  DesignationMaster_tbl INNER JOIN " +
                     " RecruitmentCodeMaster_tbl INNER JOIN " +
                     " RecruitmentApplicationMaster_tbl ON RecruitmentCodeMaster_tbl.RecruitmentPK = RecruitmentApplicationMaster_tbl.RecruitmentAppPk ON " +
                     " DesignationMaster_tbl.DesgnationPK = RecruitmentApplicationMaster_tbl.DesignationPk INNER JOIN "+
                     " BranchLocartionMaster_tbl ON RecruitmentApplicationMaster_tbl.BranchLocationPK = BranchLocartionMaster_tbl.BranchlLocationPk ON "+
                     " DepartmentMaster_tbl.DepartmentPK = DesignationMaster_tbl.DepartmentPK  WHERE RecruitmentApplicationMaster_tbl.BranchLocationPK =@PARAM1 ";
        
         
          SqlConnection con = new SqlConnection(Program.ConnStr);
            try
            {

                con.Open();
                SqlCommand cmd = new SqlCommand(Query, con);
                cmd.Parameters.AddWithValue("@PARAM1 ", Program.LOCTNPK);
                SqlDataReader reader = cmd.ExecuteReader();
                DataTable dt = new DataTable();

                dt.Load(reader);
                return dt;

            }
            catch (Exception)
            {

                throw;


            }
            finally
            {
                con.Close();
            }
         
         
         }

      /// <summary>
      /// gives datatable contianing applications which are not processed by 
      /// L1 on any others
      /// </summary>
      /// <returns></returns>

        public DataTable getallnonApprovedRecruitmentData()
        {

            DataTable dt = new DataTable(); ;
            using (SqlConnection con = new SqlConnection(Program.ConnStr))
            {
                con.Open();

                SqlCommand cmd = new SqlCommand("NotApprovedRecruitment", con);

                cmd.Parameters.AddWithValue("@BRANCHlCTNPK", Program.LOCTNPK);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataReader reader = cmd.ExecuteReader();

                dt.Load(reader);
                con.Close();
            }
            return dt;
        }



        public DataTable GetAllApllicationStatus()
        {
            DataTable dt = new DataTable(); ;
            using (SqlConnection con = new SqlConnection(Program.ConnStr))
            {
                con.Open();

                SqlCommand cmd = new SqlCommand("RecruitmentApplicationStatus", con);

                cmd.Parameters.AddWithValue("@BRANCHlCTNPK", Program.LOCTNPK);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataReader reader = cmd.ExecuteReader();

                dt.Load(reader);
                con.Close();
            }
            return dt;
        }
    
    }
}
